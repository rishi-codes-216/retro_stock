import yfinance as yf
import pandas as pd
from pandas_market_calendars import get_calendar
from datetime import datetime
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import random

StockName = ['LLY', 'HUM', 'JNJ', 'DE', 'CAT', 'TJX', 'MS']
# To run this program with your own stocks, just backspace these tickers and put in your own, in the style "['ABC', 'DEF', 'GHI', 'JKL']".
# Note - the program is written so that if you enter x tickers, $10,000 is divided into x pieces and one piece is given to each ticker.
# This means that the input "['ABC', 'DEF', 'GHI', 'JKL']" is given, $2,500 will be allocated to each of the four tickers.
# If you want to create a weighted portfolio (e.g., 2/3rds into ABC and 1/3rd into DEF), just enter the name of one ticker multiple times ("['ABC', 'ABC', 'DEF']").
# I will work on making the creation of weighted portfolios easier in the future.
StockNameTwo = ['BRK-B', 'PINS', 'AMZN', 'SOFI', 'RDFN']
# Enter the stocks you want to put in the second portfolio here.
# I will work on letting the user create and run more than two portfolios.

sp500 = pd.read_html('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')[0]
tickers = sp500['Symbol'].tolist()
RandStockName = random.sample(tickers, 7)

open_prices = [[], [], [], [], [], [], []]
rand_open_prices = [[], [], [], [], [], [], []]
one_prices = []
two_prices = []
spy_prices = []
dates = []

nyse = get_calendar('NYSE')
start_date = '2023-01-01'
end_date = datetime.now().date()
schedule = nyse.schedule(start_date=start_date, end_date=end_date)

for market_day in schedule.index:
    one_prices.append(0.0)
    two_prices.append(0.0)
    spy_prices.append(0.0)
    date_str = market_day.strftime('%b %d')
    dates.append(date_str)

SPY = yf.Ticker('spy')
FirstPrice = SPY.history(start='2023-01-03', end='2023-01-04')['Open']
FirstPrice = float(FirstPrice)
SPY_shares = 10000 / FirstPrice

for i in range(0, len(StockName)):
    ticker1 = yf.Ticker(StockName[i])
    print(StockName[i])
    OriginalPrice = float(ticker1.history(start='2023-01-03', end='2023-01-04')['Open'])
    TenKDivided = 10000 / len(StockName)
    Shares = TenKDivided / OriginalPrice

    start_date = pd.Timestamp('2023-01-03')
    ticker_data = ticker1.history(start=start_date)
    open_prices[i] = ticker_data['Open'].values

    for k in range(len(schedule.index)):
        open_prices[i][k] = open_prices[i][k] * Shares
        one_prices[k] += open_prices[i][k] - TenKDivided

for j in range(0, len(StockNameTwo)):
    ticker1 = yf.Ticker(StockNameTwo[j])
    print(StockNameTwo[j])
    OriginalPrice = float(ticker1.history(start='2023-01-03', end='2023-01-04')['Open'])
    TenKDivided = 10000 / len(StockNameTwo)
    Shares = TenKDivided / OriginalPrice

    start_date = pd.Timestamp('2023-01-03')
    ticker_data = ticker1.history(start=start_date)
    rand_open_prices[j] = ticker_data['Open'].values

    for k in range(len(schedule.index)):
        rand_open_prices[j][k] = rand_open_prices[j][k] * Shares
        two_prices[k] += rand_open_prices[j][k] - TenKDivided

spy_data = SPY.history(start=start_date)
spy_prices = spy_data['Open'].values
for k in range(len(schedule.index)):
    spy_prices[k] = (spy_prices[k] * SPY_shares) - 10000

plt.plot(dates, one_prices, 'g', label="Cramer's Heptad")
plt.plot(dates, two_prices, 'm', label="Frankel's Five")
plt.plot(dates, spy_prices, 'b', label="S&P500")
plt.xlabel('Date')
plt.ylabel('Price')
plt.ylabel('Change in value of holdings from $10,000')
plt.legend()
plt.gca().xaxis.set_major_locator(ticker.MultipleLocator(10))
plt.grid(True, which='major', axis='both', linestyle=':', linewidth='0.5', color='black')
plt.grid(True)
plt.show()
